<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>知识 on 黯梦萦辰</title>
        <link>https://blog.tinyume.com/categories/knowledge/</link>
        <description>Recent content in 知识 on 黯梦萦辰</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Sat, 18 Nov 2023 20:10:47 +0800</lastBuildDate><atom:link href="https://blog.tinyume.com/categories/knowledge/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Stable diffusion 笔记</title>
        <link>https://blog.tinyume.com/2023/stable-diffusion-tips/</link>
        <pubDate>Sat, 18 Nov 2023 20:10:47 +0800</pubDate>
        
        <guid>https://blog.tinyume.com/2023/stable-diffusion-tips/</guid>
        <description>&lt;h2 id=&#34;preface&#34;&gt;Preface
&lt;/h2&gt;&lt;p&gt;新笔记本暗影精灵 9 锐龙版自从 6 月多到手后，换了两次系统 —— 换到 win10 发现驱动没有 win10 支持所以又换了回去 win11。
到了 9 月多时，想着拿这 8g 显卡跑点啥，正好又对 Stable diffusion 感兴趣，于是研究了几天源码，跑了几天训练效果对比。
最终结果还是不尽人意，数据集不全是一方面的问题，还有我的 8g 显卡不支持我对模型继续深入研究了。&lt;/p&gt;
&lt;p&gt;原本 9 月底炼的差不多时就想着写一篇文章介绍一下 Stable diffusion，但是不知道为什么忘了（转头像转的）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此文章旨在用阐述我对 Stable diffusion 源码和架构的一些理解，以及对于 “为什么我炼不出波奇酱？” 这个问题的解答。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;脚本&#34;&gt;脚本
&lt;/h2&gt;&lt;p&gt;文章用的是 diffusers 提供的示例脚本:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/huggingface/diffusers/tree/main/examples&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/huggingface/diffusers/tree/main/examples&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于略微有点 neural network 知识的人都可以上手。
此外还有面向新手的 &lt;a class=&#34;link&#34; href=&#34;https://github.com/7eu7d7/HCP-Diffusion&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;HCP-Diffusion&lt;/a&gt; 值得推荐，照着它给的 example yaml 改改就能跑。
相对于 diffusers 和 hcpdiff，&lt;a class=&#34;link&#34; href=&#34;https://github.com/kohya-ss/sd-scripts&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sd-scripts&lt;/a&gt; 是对 diffusers 的脚本进行的拓展，但是提供的脚本复杂难以配置，不建议使用。不过 &lt;a class=&#34;link&#34; href=&#34;https://github.com/bmaltais/kohya_ss&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;基于 sd-scripts 的 GUI&lt;/a&gt; 可以考虑使用。&lt;/p&gt;
&lt;h2 id=&#34;sd-模型结构&#34;&gt;SD 模型结构
&lt;/h2&gt;&lt;p&gt;一个 SD 模型组成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FeatureExtractor (safety checker 专用)&lt;/li&gt;
&lt;li&gt;Tokenizer, TextEncoder (text)&lt;/li&gt;
&lt;li&gt;Scheduler (add noise)&lt;/li&gt;
&lt;li&gt;UNet (denoise)&lt;/li&gt;
&lt;li&gt;VAE (Variant Auto Encoder)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的部件中除了 UNet，其余都是预训练的。
FeatureExtractor, TextEncoder 这些是通用型权重，就和从 resnet 独立出 feature extractor 一个道理。&lt;/p&gt;
&lt;p&gt;VAE 也是预训练的，但是有很多人会误解它的方法和作用。
网上查不到具体训练方法，论文里讲的也不多，在 G. Details on Autoencoder Models 那一部分。
我的猜测是和 AE 差不多，img -&amp;gt; latents -&amp;gt; img 的自监督训练。其中的 latents 和 embeddings 有异曲同工之处，区别在于 latents 作为模型输入，有具体形状，embeddings 作为上下文嵌入，一般是 linear features。
VAE 的 encoder 可以实现 img2img 的效果，下面会具体讲讲。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VAE 细节：源码里的 VAE encoder 输出是 8 维的，会使用一个叫做 &lt;code&gt;DiagonalGaussianDistribution&lt;/code&gt; 的模型进行变分处理（大概是为了增强重建能力），同时这个变分模型也提供了合并方法输出 4 维，再输入到 UNet。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这里是我根据 diffusers 文档实现的完整 pipeline: &lt;a class=&#34;link&#34; href=&#34;https://github.com/iyume/diffusers-test/blob/main/tours/diffusers_tour_pipeline_depart.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/iyume/diffusers-test/blob/main/tours/diffusers_tour_pipeline_depart.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;text-to-image&#34;&gt;text-to-image
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;tokenize prompt&lt;/li&gt;
&lt;li&gt;根据 tokens 和 textual inversion weights 进行 token -&amp;gt; vectors 映射&lt;/li&gt;
&lt;li&gt;创建一个长度相同的 uncond_embeddings 并 concat 进去（N+1），旨在使用 CFG Scale (guidance_scale) 控制结果与 prompt 的贴合程度&lt;/li&gt;
&lt;li&gt;创建噪声图，scheduler 循环 timestep 调用 UNet 降噪，embedding 在 UNet 内部处理&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;UNet 有个 time embedding 我没看懂，不知道为什么要将 text embedding 转换为 time embedding。参照 &lt;a class=&#34;link&#34; href=&#34;https://github.com/huggingface/diffusers/blob/4e54dfe985293df9e6e86828d7a2763d076879f5/src/diffusers/models/unet_2d_condition.py#L925&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;1&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://github.com/huggingface/diffusers/blob/4e54dfe985293df9e6e86828d7a2763d076879f5/src/diffusers/models/embeddings.py#L238&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://github.com/huggingface/diffusers/blob/4e54dfe985293df9e6e86828d7a2763d076879f5/src/diffusers/models/embeddings.py#L190&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;3&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;image-to-image&#34;&gt;image-to-image
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;利用 VAE encoder 将图像编码为 latents&lt;/li&gt;
&lt;li&gt;根据 step 和 strength 调用 scheduler 对 latents 增加噪声&lt;/li&gt;
&lt;li&gt;scheduler 循环 timestep 调用 UNet 降噪，有 prompt 的话就载入 text embedding&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;context-embeddings&#34;&gt;Context Embeddings
&lt;/h3&gt;&lt;p&gt;Context Embeddings 是 Stable diffusion 模型里面一个非常重要的设计，用于接受各种各样的输入，如文本、图像、音乐、语音。
embeddings 并不是多模态，它们有着重要的区别：Stable diffusion 只能接受单一种类的 embedding，除非使用 adapter 模型对各种潜在空间进行相互转换。&lt;/p&gt;
&lt;p&gt;具体的嵌入方法就是 Attention 注意力机制。
Attention 是一个单独的层，大部分有着独立的权重，用于改变输出，一般不影响输出的尺寸。&lt;/p&gt;
&lt;p&gt;就我个人经验而言，在传统的 CNN 领域里，Attention 一般分为 Channel Attention 和 Spatial Attention，根据维度的不同，计算方差或者其他类似的值，加到结果内。&lt;/p&gt;
&lt;p&gt;在 Stable diffusion 则是一个叫做 &lt;a class=&#34;link&#34; href=&#34;https://github.com/huggingface/diffusers/blob/4e54dfe985293df9e6e86828d7a2763d076879f5/src/diffusers/models/transformer_2d.py#L45&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Transformer2DModel&lt;/a&gt; 的模型，比较复杂没细看。&lt;/p&gt;
&lt;h2 id=&#34;训练方法&#34;&gt;训练方法
&lt;/h2&gt;&lt;p&gt;基于 RTX 4060 Laptop 8G 测试，只跑得动 textual inversion 和 lora，所以只对这两个训练方法做介绍。&lt;/p&gt;
&lt;p&gt;训练图片采用的是 16 张从 TV 截图的波奇酱的图片，每两张在 anythingv5 模型上做了 img2img 风格化处理（对于 lora 似乎影响不大），所以眼睛会略微偏蓝。&lt;/p&gt;
&lt;h3 id=&#34;textual-inversion&#34;&gt;Textual Inversion
&lt;/h3&gt;&lt;p&gt;文本反转，即不是通过改变权重来改变模型效果，而是通过改变输入来改变输出。&lt;/p&gt;
&lt;p&gt;训练 textual inversion 时，通过创建一个 tokenizer 不认识的 token，映射至对应的向量，这个向量长度可以由 num_vectors 控制。
向量长度越大，输出的权重文件也就越大，一般 32 vectors 对应 97 kb。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 tokenizer 中，一个 word 是有可能对应多个 token 的，比如 girls 会被拆分为 girl, s&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;**结果评价：**训练时间 1 小时。97 KB (32 vectors)。
完全无法训练姿态，只会扭曲模型效果（姿态有关的都只能采用 ControlNet 和 openpose）。动漫人物的发饰、呆毛、眼球等细节完全无法还原，容易产生撕裂现象，还有模糊不清。大概只能训练结合模型已有的物品。非常容易破坏模型风格。&lt;/p&gt;
&lt;p&gt;综上，Textual Inversion 是一个很黑盒很 DNN 的操作，大炼丹师或许可以得到非常小的权重和非常完美的结果，或者是大魔法师配合优秀的 prompt 也能得到不错的结果，但是不建议使用这个训练方法。&lt;/p&gt;
&lt;p&gt;下图是使用单 keyword (gotou_hitori) 不搭配任何 prompt 生成的图像：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/iyume/diffusers-test/output_ti_single_word.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;下图是使用 keyword 搭配 prompt 生成的图像：&lt;/p&gt;
&lt;p&gt;使用了类似 &lt;code&gt;[[gotou_hitori:0.2]::0.8]&lt;/code&gt; 的 prompt 魔法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/iyume/diffusers-test/output_ti_prompted.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;text-to-image-1&#34;&gt;text-to-image
&lt;/h3&gt;&lt;p&gt;最原始的方法，旨在训练整个 UNet。&lt;/p&gt;
&lt;p&gt;对降噪误差做 backward，比如 DDIM 有 50 timestep，对 20 至 21 的降噪步骤相减并 backward。&lt;/p&gt;
&lt;p&gt;我这里只用了 text-to-image lora 脚本，没有记录训练时间，但是我记得和 textual inversion 的训练时长差不多，且模型效果比 textual inversion 还差，大概率是因为数据集不完善。diffusers 的官方脚本没更新，只能用它老一套的 datasets 载入，比较麻烦。&lt;/p&gt;
&lt;p&gt;评价为不好用，要求数据集完善，可以被 dreambooth 完美取代。&lt;/p&gt;
&lt;h3 id=&#34;dreambooth&#34;&gt;Dreambooth
&lt;/h3&gt;&lt;p&gt;参照官方的 &lt;a class=&#34;link&#34; href=&#34;https://dreambooth.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dreambooth 讲解&lt;/a&gt;。
Dreambooth 也是训练整个 UNet 的方法，但是速度快，要求数据集小。&lt;/p&gt;
&lt;p&gt;我这里只训练了 dreambooth lora 脚本。训练的关键参数是 rank，类似于 textual inversion 中的 num_vectors。
rank 越高表示控制的维度越深，同时权重文件也会越大，也更容易过拟合。&lt;/p&gt;
&lt;p&gt;防止过拟合的方法最简单的就是用 tensorboard 看看每一百步生成的测试图像。&lt;/p&gt;
&lt;p&gt;**结果评价：**训练时间 10 分钟，可以关掉 validation。3 MB (rank 1)。
对动漫人物的学习（建议 rank&amp;gt;10）可以达到略胜于 Textual Inversion 的效果，主要是不容易影响模型自带的风格，模型兼容性也比 TI 更好。但对于波奇酱的方块发饰则很难达到好的效果，生成出来要么是圆的，要么一大一小，只有极小概率会生成出不错的发饰。&lt;/p&gt;
&lt;p&gt;参考生成图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/iyume/diffusers-test/output_dreambooth_lora.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Dreambooth lora test&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;第一张的效果最佳，不过呆毛偏上了点。相比于 TI 来说，lora 不需要搭配太多 prompt，只要 &lt;code&gt;&amp;lt;lora:gotou_hitori&amp;gt;&lt;/code&gt; 载入 lora 即可达到不错的效果。&lt;/p&gt;
&lt;h2 id=&#34;高清生成&#34;&gt;高清生成
&lt;/h2&gt;&lt;p&gt;最后放一张使用 anime6k 配合 prompt 咒语生成的高清图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/iyume/diffusers-test/output_highres_hitori_balloon.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;波奇酱高清&#34;
	
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;里面应该是包含了 generation data 的。话说现在居然还没有一个便利的查看/修改 generation data 的工具，打算自己写一个了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;笔记&#34;&gt;笔记
&lt;/h2&gt;&lt;p&gt;随手记的一个笔记&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CFG Scale(classifier-free guidance): 提示词和生成图像的贴合程度
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Outpainting: 向外延展画布
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Inpainting: 修复图像内部空缺
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Color Sketch: 为素描画填充颜色
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Prompt Matrix: 提示词矩阵，用 | 分割提示词的排列组合进行扩散
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Pormpt S/R: 提示词 Search/Replace，搜索替换并矩阵扩散
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Prompt Editing: [from:to:when] 控制每次 inference step 的 prompt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(()) 给予更多权重，(word:1.111) 权重分配
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X/Y/Z plot: 同 X/Y plot，根据不同输入参数（提示词，CFG scale，step 等）创建输出矩阵
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Textual Inversion: 将特定提示词和相关图像嵌入模型进行训练
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tiling: 将图像周期平铺放大分辨率，比如把花的数量增加
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Styles: 保存常用提示词
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Variations: 图像微调，与 img2img 不同在于，微调的提示词是可选的，构图通常有很大变化
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;High-res fix: 防止生成高分辨率（大于 512x512）时出现图像扭曲，在生成 512x512 时设置 upscale 参数 1.5 则输出 768x768，step 设置为 0 时会使用 sampling step 的值
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Upscaling: 将图像进行放大
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Alternating Words: 交叉使用不同的 prompt，是 Prompt Editing 的自动版
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcmalloc: 对显存分配提升巨大，见 https://github.com/AUTOMATIC1111/stable-diffusion-webui/discussions/6722
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;将 generation data 粘贴到 prompt 然后点击 &amp;#34;Generate&amp;#34; 下方第一个蓝色按钮即可自动应用参数
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://www.youtube.com/watch?v=dVjMiJsuR5o
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Dreambooth: 训练整个模型最有效的方法，也只能训练整个模型，占用空间大
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Textual Inversion: 在 text encoder 进行训练，对某种特定的单词创建特定的 embeddings (vector) 再输入模型，只改变描述，不改变模型效果
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LoRA: 在模型中插入低秩权重，对这个权重进行训练，同时会减慢生成速度，数个 LoRA 可以同时使用，但很容易过拟合（容易记住数据集）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tricks:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(1) num_train_epochs = max_steps * batch_size / len(train_dataloader)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;max_steps = num_train_epochs * len(train_dataloader) / batch_size
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;假如有 14 张训练图片，此时 len(train_dataloader)=1400，则 epochs = max_steps * 4 / 1400，max_steps=1050 时 epochs=3，max_steps=1051 时 epochs=4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(2) Inpainting Mask blur 是进行高斯模糊的参数，0 代表完全改变，越高代表越少的改变
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(3) [[gotou_hitori:0.2]::0.8] add gotou_hitori from 0.2 to 0.8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;后记&#34;&gt;后记
&lt;/h2&gt;&lt;p&gt;Stable diffusion 太强了，生成美少女也很好玩，源码太复杂没能全部读完，将来要是有兴趣了再读吧。&lt;/p&gt;
&lt;p&gt;虽然我对 AI 感兴趣，从最开始的 CS231n 到后面发论文，期间读了很多 segmentation(deeplabv3,bisenetv2,unet)、fusion(多尺度、曝光、聚焦等各种融合) 等领域的优秀论文，也从中学了很多。
但我毕竟是个末流一本，也不是搞算法和数学原理的，对我而言沉没成本很大。
AI 我是打算只当作兴趣学学的。Web3 也差不多，后面可能会写一篇介绍 go-ethereum 的文章。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前居然还有一个人开了 issue 和我讨论，挺惊讶的：https://github.com/iyume/image-fusion/issues/2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文章花了一整天的时间来写，太久没写文章感觉很生疏。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>BOM、UTF-8 和浏览器编码问题</title>
        <link>https://blog.tinyume.com/2020/bom-introduction/</link>
        <pubDate>Tue, 08 Dec 2020 15:52:00 +0800</pubDate>
        
        <guid>https://blog.tinyume.com/2020/bom-introduction/</guid>
        <description>&lt;p&gt;原本只是无意间发现 &lt;a class=&#34;link&#34; href=&#34;https://github.com/luhuisicnu/The-Flask-Mega-Tutorial-zh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/luhuisicnu/The-Flask-Mega-Tutorial-zh&lt;/a&gt; 这个项目，想拷到本地查看（毕竟 Gitbook 的速度也是挺不理想）&lt;/p&gt;
&lt;p&gt;之前虽然有过类似的操作，当时是用 gitbook serve 实现在本地浏览器查看，不过这样的操作未免过于繁琐。于是这次便想着配合 wsl apache + markdown viewer 来简化操作流程&lt;/p&gt;
&lt;p&gt;当我部署完成访问&lt;code&gt;SUMMARY.md&lt;/code&gt;时，却出现了中文乱码，再点开浏览器编码，发现浏览器自动使用了西文编码而不是&lt;code&gt;UTF-8&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;想到我之前参赛中遇到的一些小问题，结合起来写出了这篇关于 Unicode 各种文件头中的介绍文章，以及一些个人的猜测&lt;/p&gt;
&lt;h2 id=&#34;先讲讲utf-8和utf-8-with-bom&#34;&gt;先讲讲&lt;code&gt;utf-8&lt;/code&gt;和&lt;code&gt;utf-8 with bom&lt;/code&gt;
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;BOM（Byte Order Mark），字节顺序标记，出现在文本文件头部，Unicode编码标准中用于标识文件是采用哪种格式的编码。&lt;/p&gt;
&lt;p&gt;&amp;mdash;-百度百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;建立 abc.txt 用&lt;code&gt;utf-8&lt;/code&gt;保存
建立 abd.txt 用&lt;code&gt;utf-8 with bom&lt;/code&gt;保存&lt;/p&gt;
&lt;p&gt;如果你有 VSCode，那么打开文件在右下角便可以看见一个&lt;code&gt;UTF-8&lt;/code&gt;标识，点开再通过编码保存就行了&lt;/p&gt;
&lt;p&gt;并给两个文件写入相同内容&lt;/p&gt;
&lt;p&gt;再使用 010 Editor 分别打开两个文件&lt;/p&gt;
&lt;p&gt;我们知道&lt;code&gt;utf-8&lt;/code&gt;是无字节序的，没有所谓文件头
而 UTF-8 with BOM 文件头多出来了&lt;code&gt;EF BB BF&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;相关网站：&lt;a class=&#34;link&#34; href=&#34;https://developer.ibm.com/zh/articles/unicode-programming-language/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.ibm.com/zh/articles/unicode-programming-language/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;可以得知虽然 BOM 的意思是字节顺序标记，但在 UTF-8 编码格式的文本中，如果添加了 BOM，则标示该文本是由 UTF-8 编码方式编码的，而不用来说明字节序&lt;/p&gt;
&lt;h2 id=&#34;python-处理utf-8-with-bom&#34;&gt;Python 处理&lt;code&gt;utf-8 with bom&lt;/code&gt;
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;之前在比赛中使用&lt;code&gt;burp&lt;/code&gt;爆破时，总会发现字典的第一个密码在&lt;code&gt;burp&lt;/code&gt;中会显示成乱码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先试着打开一下第一行会乱码的那个文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./password.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第一行是&lt;code&gt;\ufeffadmin&lt;/code&gt;，多了个奇怪的东西&lt;code&gt;\ufeff&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;并且这个东西可以通过如下语句去掉，只是换了个编码方式&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./password.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8-sig&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们知道&lt;code&gt;\u&lt;/code&gt;就是表示&lt;code&gt;unicode&lt;/code&gt;，那么&lt;code&gt;\ufeff&lt;/code&gt;是什么呢？&lt;/p&gt;
&lt;p&gt;尝试以下代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;i like milk&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8-sig&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# output: b&amp;#39;\xef\xbb\xbfi like milk&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;i like milk&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8-sig&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# output: &amp;#39;\ufeffi like milk&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第一行中出现了&lt;code&gt;\xef\xbb\xbf&lt;/code&gt;，&lt;code&gt;\x&lt;/code&gt;是表示十六进制的，并且&lt;code&gt;EF BB BF&lt;/code&gt;正好就是 UTF-8 with bom 的文件头部&lt;/p&gt;
&lt;p&gt;在第二行中使用&lt;code&gt;utf-8-sig&lt;/code&gt;编码再使用&lt;code&gt;utf-8&lt;/code&gt;解码便出现了&lt;code&gt;\ufeff&lt;/code&gt;这个玩意&lt;/p&gt;
&lt;p&gt;可以推测&lt;code&gt;\ufeff&lt;/code&gt;就是之前提到的多出的三个十六进制符&lt;code&gt;EF BB BF&lt;/code&gt;在&lt;code&gt;decode(&#39;utf-8&#39;)&lt;/code&gt;时被错误识别而编码出来的部分&lt;/p&gt;
&lt;p&gt;并且通过查阅资料，可以发现&lt;code&gt;FE FF&lt;/code&gt;是 UTF-16-BE 的 BOM&lt;/p&gt;
&lt;p&gt;但是也有许多讲不通的地方，于是去查了谷歌发现这样一句话&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our friend FEFF means different things, but it&amp;rsquo;s basically a signal for a program on how to read the text. It can be UTF-8 (more common), UTF-16 , or even UTF-32 . FEFF itself is for UTF-16 — in UTF-8 it is more commonly known as 0xEF,0xBB, or 0xBF&lt;/p&gt;
&lt;p&gt;个人翻译：FEFF 可以代表不同的东西，但它基本上是一个程序阅读一个文本的信号。它可以意味着 UTF-8（更常见），UTF-16，甚至是 UTF-32。FEFF 自身是属于 UTF-16，在 UTF-8 中它通常被称为 0xEF, 0xBB, 0xBF&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是我有个了更大胆的猜测：因为 UTF-8 无字节序，它并不知道面对的文件编码到底是哪种，所以我们平时保存所谓的 UTF-8，实际上会以 UTF-16 读取！&lt;/p&gt;
&lt;p&gt;说那么多，不如来动手试试！&lt;/p&gt;
&lt;p&gt;先把&lt;code&gt;abc.txt&lt;/code&gt;用 UTF-16-BE 储存&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;./abc.txt&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-16-be&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# output: &amp;#39;\ufeffadddd这是中文\n\nand this is milk.\n&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;出现了熟悉的&lt;code&gt;\ufeff&lt;/code&gt;！&lt;/p&gt;
&lt;p&gt;与 UTF-8 相同的是，UTF-16-BE 和 UTF-16-LE 也可以不需要 BOM（也许都不需要，但若是如此则需要自己判断类型）&lt;/p&gt;
&lt;p&gt;并且还发现了一个出乎意料并且有意思的东西&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# output: b&amp;#39;\xff\xfea\x00b\x00c\x00&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-16-le&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# output: &amp;#39;\ufeffabc&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;abc&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-16-be&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# output: &amp;#39;\ufffe愀戀挀&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;以上代码使用&lt;code&gt;utf-16&lt;/code&gt;编码出来的头为&lt;code&gt;\xff\xfe&lt;/code&gt;，而在使用&lt;code&gt;utf-16-le&lt;/code&gt;解码却出现了&lt;code&gt;\ufeff&lt;/code&gt;，可能的推测就是&lt;code&gt;utf-16-le&lt;/code&gt;对&lt;code&gt;utf-16&lt;/code&gt;编码的字符的处理相对于&lt;code&gt;utf-16-be&lt;/code&gt;是对每两个十六进制数交换了一下位置&lt;/p&gt;
&lt;p&gt;还有处地方很神奇了，此前我一直以为 UTF-16 decode 和 UTF-16-LE decode 是一样的效果，在这里居然多了个&lt;code&gt;\ufeff&lt;/code&gt;，略微试试才发现&lt;code&gt;utf-16 encode&lt;/code&gt;和&lt;code&gt;utf-16-le encode&lt;/code&gt;是不一样的，&lt;strong&gt;并且&lt;code&gt;utf-16-le decode&lt;/code&gt;不会处理&lt;code&gt;\xff\xfe&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是以下代码却出乎我的意料&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xef\xbb\xbf&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-16&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;ï»¿&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;很多人可能不知道&lt;code&gt;ï»¿&lt;/code&gt;是什么符号，但我曾经在&lt;code&gt;burp&lt;/code&gt;见过&lt;/p&gt;
&lt;p&gt;它就是在某些软件中载入&lt;code&gt;utf-8 with bom&lt;/code&gt;文件时，首行被错误识别的字符！&lt;/p&gt;
&lt;p&gt;再尝试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xef\xbb\xbf&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ï»¿&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;它们的输出都是&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xc3\xaf\xc2\xbb\xc2\xbf&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;ï»¿&lt;/code&gt;的十进制为 239 187 191，它实际上就对应&lt;code&gt;EF BB BF&lt;/code&gt;，只不过 UTF-8 错误地将它当成字符解释了出来&lt;/p&gt;
&lt;h2 id=&#34;综上我们可以得出以下三点结论&#34;&gt;综上我们可以得出以下三点结论
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UTF-8 的 BOM 会被识别它自身识别成&lt;code&gt;ï»¿&lt;/code&gt;（这并不是乱码）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对&lt;code&gt;EF BB BF&lt;/code&gt;的编码有如下特征&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接使用 UTF-8 decode，它会变成&lt;code&gt;\ufeff&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先执行 UTF-8 encode，再执行 UTF-8 decode，它会变成&lt;code&gt;ï»¿&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先执行 UTF-16 encode，再执行 UTF-16 decode，它会变成&lt;code&gt;ï»¿&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先执行 UTF-16 encode，再执行 UTF-16-LE decode，他会变成&lt;code&gt;\ufeffï»¿&lt;/code&gt;（最奇怪的地方）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;\ufeff&lt;/code&gt;会在以下情况出现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;b&#39;\xef\xbb\xbf&#39;.decode(&#39;utf-8&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#39;&#39;.encode(&#39;utf-8-sig&#39;).decode(&#39;utf-8&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#39;&#39;.encode(&#39;utf-16&#39;).decode(&#39;utf-16-le&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;utf-16 encode&lt;/code&gt;会给加上头部&lt;code&gt;\xff\xfe&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而&lt;code&gt;utf-16-le encode&lt;/code&gt;和&lt;code&gt;utf-16-be encode&lt;/code&gt;并不会&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;并且&lt;code&gt;utf-16-le decode&lt;/code&gt;和&lt;code&gt;utf-16-be decode&lt;/code&gt;不会处理来自&lt;code&gt;utf-16 encode&lt;/code&gt;加上的文件头&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;我对此的猜测&#34;&gt;我对此的猜测
&lt;/h2&gt;&lt;p&gt;回归原题目：&lt;strong&gt;为什么读取 utf-8 with bom 的文件首行会出现&lt;code&gt;\ufeff&lt;/code&gt;？并且某些软件会出现&lt;code&gt;ï»¿&lt;/code&gt;？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可能是编程软件中的&lt;code&gt;utf-8&lt;/code&gt;处理带 BOM 编码文件时，有一种特殊的兼容性处理方式，就是在 BOM 之后的每一位十六进制符往后填充&lt;code&gt;\x00&lt;/code&gt;，首部填充了&lt;code&gt;\xff\xfe&lt;/code&gt;，将其转换为标准&lt;code&gt;utf-16&lt;/code&gt;编码，再使用&lt;code&gt;utf-16-le decode&lt;/code&gt;，而 BOM 的&lt;code&gt;EF BB BF&lt;/code&gt;由于仅代表 Zero Width No-Break Space，可能存在某种特殊机制使其在&lt;code&gt;utf-16 encode&lt;/code&gt;之前就变成了空字符，而&lt;code&gt;utf-16 encode&lt;/code&gt;所加上的文件头&lt;code&gt;\xff\xfe&lt;/code&gt;在&lt;code&gt;utf-16-le decode&lt;/code&gt;后就变成了&lt;code&gt;\xfe\xff&lt;/code&gt;，但这种可能也无法解释为什么&lt;code&gt;utf-8 without bom&lt;/code&gt;编码文件在解码时不会被加上&lt;code&gt;\ufeff&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可能&lt;code&gt;\xef\xbb\xbf&lt;/code&gt;执行&lt;code&gt;utf-8 decode&lt;/code&gt;就是&lt;code&gt;\ufeff&lt;/code&gt;，但会有很多地方解释不清&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可能是某些软件读取文件时，直接对十六进制内容进行&lt;code&gt;utf-8 decode&lt;/code&gt;（或是&lt;code&gt;utf-16 decode&lt;/code&gt;），导致 BOM 被当作文件一部分解释了出来，进而出现了&lt;code&gt;ï»¿&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注意&#34;&gt;注意
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;我本人不是很熟悉编码方面的原理，一切仅是推理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文章也算是一个抛砖引玉吧，毕竟这一块找了挺多资料都没有很详细的记载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;说了那么多额外话题，最初的浏览器中文乱码问题的解决方法其实就是在&lt;code&gt;markdown viewer&lt;/code&gt;设置中添加一项&lt;code&gt;http://localhost&lt;/code&gt; match all 并且开启 encoding utf-8 就行了&lt;/p&gt;
&lt;p&gt;限于时间，我没空再进行别的实验了，比如说添加响应头来看看浏览器会不会识别，实际上写这一篇文章已经耗了一个晚上&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;小结一下就是：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编程语言及各类常用应用中，使用 UTF-8 编码的文件可以被正常读取，而浏览器不行&lt;/p&gt;
&lt;p&gt;使用 UTF-8 with BOM 可以正常被浏览器读取，而在大多数编程语言中需要进行额外处理，并且有一小部分软件无法识别 BOM（比如&lt;code&gt;burp&lt;/code&gt;）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>JS 操作 Json DOM</title>
        <link>https://blog.tinyume.com/2019/modify-json-dom-in-html/</link>
        <pubDate>Thu, 31 Oct 2019 00:27:08 +0800</pubDate>
        
        <guid>https://blog.tinyume.com/2019/modify-json-dom-in-html/</guid>
        <description>&lt;h2 id=&#34;起因&#34;&gt;起因
&lt;/h2&gt;&lt;p&gt;在修复结构化数据时，尝试使用原生 JS 去操作含在 html 标签内的 Json&lt;/p&gt;
&lt;h2 id=&#34;简易实现方法&#34;&gt;简易实现方法
&lt;/h2&gt;&lt;h3 id=&#34;json-example&#34;&gt;Json Example
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myjsonid&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;application/ld+json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;headline&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;datePublished&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;dateModified&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 不能添逗号否则 parse 报错
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;第一种方法&#34;&gt;第一种方法
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;myjsonid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nodeValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;headline&amp;#34;: &amp;#34;myheadline&amp;#34;, &amp;#34;datePublished&amp;#34;: &amp;#34;1024-1024-1024&amp;#34;, &amp;#34;dateModified&amp;#34;: &amp;#34;1024-1024-1024&amp;#34;, &amp;#34;image&amp;#34;: &amp;#34;https://i.loli.net/2019/10/31/9kjzeQfiy43HK2B.jpg&amp;#34;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Completely replace it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;第二种方法&#34;&gt;第二种方法
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;myjsonid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;textContent&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;headline&amp;#34;: &amp;#34;myheadline&amp;#34;, &amp;#34;datePublished&amp;#34;: &amp;#34;1024-1024-1024&amp;#34;, &amp;#34;dateModified&amp;#34;: &amp;#34;1024-1024-1024&amp;#34;, &amp;#34;image&amp;#34;: &amp;#34;https://i.loli.net/2019/10/31/9kjzeQfiy43HK2B.jpg&amp;#34;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Completely replace it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;output&#34;&gt;Output
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;myjsonid&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;application/ld+json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;headline&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;myheadline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;datePublished&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1024-1024-1024&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;dateModified&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1024-1024-1024&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;image&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://i.loli.net/2019/10/31/9kjzeQfiy43HK2B.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样毫无疑问很麻烦，如果只想要改一对键值的话，全部替换岂不要命？&lt;/p&gt;
&lt;p&gt;上面方法只是操作了 Json 字符串，但是 JS 娘还有各种操作 Json 对象的方法，那么可以将其转化为对象然后再偷梁换柱一波&lt;/p&gt;
&lt;h2 id=&#34;最终实现&#34;&gt;最终实现
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;myjsonid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nodeValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;headline&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;myheadline&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;datePublished&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1024-1024-1024&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dateModified&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1024-1024-1024&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://i.loli.net/2019/10/31/9kjzeQfiy43HK2B.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;firstChild&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nodeValue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Also use script.textContent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
